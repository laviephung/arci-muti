#!/bin/bash

# Script t·ª± ƒë·ªông setup nhi·ªÅu node Arcium v·ªõi random offset
# S·ª≠ d·ª•ng: ./setup-nodes.sh <s·ªë_node>

set -e

# M√†u s·∫Øc
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# S·ªë node mu·ªën t·∫°o (m·∫∑c ƒë·ªãnh 5)
NUM_NODES=${1:-5}
RPC_URL="https://api.devnet.solana.com"
OFFSET_FILE="offsets-used.txt"

# H√†m t·∫°o offset ng·∫´u nhi√™n v√† ki·ªÉm tra tr√πng
generate_unique_offset() {
    local offset
    local max_attempts=100
    local attempt=0
    
    while [ $attempt -lt $max_attempts ]; do
        # T·∫°o s·ªë ng·∫´u nhi√™n t·ª´ 100000000 ƒë·∫øn 100032767
        offset=$((100000000 + RANDOM))
        
        # Ki·ªÉm tra xem offset ƒë√£ t·ªìn t·∫°i trong file ch∆∞a
        if [ -f "$OFFSET_FILE" ] && grep -q "^$offset$" "$OFFSET_FILE"; then
            attempt=$((attempt + 1))
            continue
        fi
        
        # Ki·ªÉm tra tr√™n chain xem offset ƒë√£ ƒë∆∞·ª£c d√πng ch∆∞a
        echo -e "    ${BLUE}‚Üí${NC} ƒêang ki·ªÉm tra offset $offset tr√™n chain..." >&2
        
        if arcium arx-info $offset --rpc-url $RPC_URL 2>&1 | grep -q "Error"; then
            # Offset ch∆∞a ƒë∆∞·ª£c d√πng
            echo "$offset" >> "$OFFSET_FILE"
            echo "$offset"
            return 0
        else
            echo -e "    ${YELLOW}‚Üí${NC} Offset $offset ƒë√£ ƒë∆∞·ª£c d√πng, t·∫°o m·ªõi..." >&2
            attempt=$((attempt + 1))
        fi
    done
    
    echo -e "${RED}‚úó Kh√¥ng th·ªÉ t·∫°o offset sau $max_attempts l·∫ßn th·ª≠!${NC}" >&2
    exit 1
}

echo -e "${BLUE}========================================${NC}"
echo -e "${GREEN}   ARCIUM MULTI-NODE SETUP SCRIPT${NC}"
echo -e "${BLUE}========================================${NC}"
echo -e "${YELLOW}S·ªë node s·∫Ω t·∫°o: $NUM_NODES${NC}\n"

# L·∫•y IP VPS
echo -e "${BLUE}[1/6]${NC} ƒêang l·∫•y IP VPS..."
IP_ADDRESS=$(curl -s https://ipecho.net/plain)
echo -e "${GREEN}‚úì IP VPS: $IP_ADDRESS${NC}\n"

# T·∫°o file l∆∞u ƒë·ªãa ch·ªâ v√≠
echo -e "${BLUE}[2/6]${NC} T·∫°o file backup ƒë·ªãa ch·ªâ v√≠..."
WALLET_BACKUP="wallets-backup.txt"
echo "=== ARCIUM NODES WALLET BACKUP ===" > $WALLET_BACKUP
echo "IP VPS: $IP_ADDRESS" >> $WALLET_BACKUP
echo "Date: $(date)" >> $WALLET_BACKUP
echo "" >> $WALLET_BACKUP

# T·∫°o/ƒë·ªçc file l∆∞u offset ƒë√£ d√πng
touch $OFFSET_FILE

# ƒê·∫øm s·ªë node ƒë√£ t·ªìn t·∫°i
EXISTING_NODES=0
for dir in node-*/; do
    [ -d "$dir" ] && EXISTING_NODES=$((EXISTING_NODES + 1))
done

if [ $EXISTING_NODES -gt 0 ]; then
    echo -e "${YELLOW}Ph√°t hi·ªán $EXISTING_NODES node ƒë√£ t·ªìn t·∫°i${NC}"
    echo -e "${YELLOW}S·∫Ω t·∫°o th√™m $((NUM_NODES - EXISTING_NODES)) node m·ªõi${NC}\n"
    START_INDEX=$((EXISTING_NODES + 1))
else
    START_INDEX=1
fi

# Loop qua t·ª´ng node
for i in $(seq $START_INDEX $NUM_NODES); do
    NODE_DIR="node-$i"
    
    # B·ªè qua n·∫øu th∆∞ m·ª•c ƒë√£ t·ªìn t·∫°i
    if [ -d "$NODE_DIR" ]; then
        echo -e "${YELLOW}Node $i ƒë√£ t·ªìn t·∫°i, b·ªè qua...${NC}\n"
        continue
    fi
    
    echo -e "${BLUE}[3/6]${NC} ${YELLOW}ƒêang setup NODE $i...${NC}"
    
    # T·∫°o offset ng·∫´u nhi√™n
    NODE_OFFSET=$(generate_unique_offset)
    echo -e "${GREEN}‚úì Offset ƒë∆∞·ª£c ch·ªçn: $NODE_OFFSET${NC}"
    
    # T·∫°o th∆∞ m·ª•c
    mkdir -p $NODE_DIR/logs
    cd $NODE_DIR
    
    # T·∫°o keypair
    echo -e "  ${GREEN}‚Üí${NC} T·∫°o keypair..."
    solana-keygen new --outfile node-keypair.json --no-bip39-passphrase --silent 2>/dev/null
    solana-keygen new --outfile callback-kp.json --no-bip39-passphrase --silent 2>/dev/null
    openssl genpkey -algorithm Ed25519 -out identity.pem 2>/dev/null
    
    # L·∫•y ƒë·ªãa ch·ªâ v√≠
    NODE_ADDR=$(solana address --keypair node-keypair.json)
    CALLBACK_ADDR=$(solana address --keypair callback-kp.json)
    
    # L∆∞u v√†o file backup
    echo "--- NODE $i ---" >> ../$WALLET_BACKUP
    echo "Offset: $NODE_OFFSET" >> ../$WALLET_BACKUP
    echo "Node Wallet: $NODE_ADDR" >> ../$WALLET_BACKUP
    echo "Callback Wallet: $CALLBACK_ADDR" >> ../$WALLET_BACKUP
    echo "Faucet link: https://faucet.solana.com" >> ../$WALLET_BACKUP
    echo "" >> ../$WALLET_BACKUP
    
    echo -e "  ${GREEN}‚Üí${NC} Node wallet: ${GREEN}$NODE_ADDR${NC}"
    echo -e "  ${GREEN}‚Üí${NC} Callback wallet: ${GREEN}$CALLBACK_ADDR${NC}"
    
    # T·∫°o file config
    cat > node-config.toml <<EOF
[node]
offset = $NODE_OFFSET
hardware_claim = 0
starting_epoch = 0
ending_epoch = 9223372036854775807

[network]
address = "0.0.0.0"

[solana]
endpoint_rpc = "$RPC_URL"
endpoint_wss = "wss://api.devnet.solana.com"
cluster = "Devnet"
commitment.commitment = "confirmed"
EOF
    
    echo -e "  ${GREEN}‚úì${NC} ƒê√£ t·∫°o config\n"
    
    cd ..
done

echo -e "${GREEN}========================================${NC}"
echo -e "${GREEN}‚úì Ho√†n th√†nh setup $NUM_NODES nodes!${NC}"
echo -e "${GREEN}========================================${NC}\n"

# T·ª± ƒë·ªông generate docker-compose.yml
if [ -f "generate-compose.sh" ]; then
    echo -e "${BLUE}ƒêang t·∫°o docker-compose.yml cho $NUM_NODES nodes...${NC}"
    ./generate-compose.sh $NUM_NODES 8080 > /dev/null 2>&1
    echo -e "${GREEN}‚úì ƒê√£ t·∫°o docker-compose.yml${NC}\n"
fi

echo -e "${YELLOW}üìã DANH S√ÅCH OFFSET ƒê√É T·∫†O:${NC}"
cat $OFFSET_FILE | nl
echo ""

echo -e "${YELLOW}üìã B∆Ø·ªöC TI·∫æP THEO:${NC}"
echo -e "${BLUE}1.${NC} M·ªü file ${GREEN}$WALLET_BACKUP${NC} ƒë·ªÉ xem danh s√°ch ƒë·ªãa ch·ªâ v√≠"
echo -e "   ${CYAN}cat $WALLET_BACKUP${NC}"
echo -e "${BLUE}2.${NC} V√†o ${GREEN}https://faucet.solana.com${NC} ƒë·ªÉ airdrop SOL cho T·∫§T C·∫¢ c√°c v√≠"
echo -e "${BLUE}3.${NC} Ch·∫°y script init: ${GREEN}./init-nodes.sh $NUM_NODES${NC}"
echo -e "${BLUE}4.${NC} Sau khi init xong, ch·∫°y: ${GREEN}docker-compose up -d${NC}\n"

echo -e "${RED}‚ö†Ô∏è  L∆ØU √ù:${NC}"
echo -e "  ‚Ä¢ File ${GREEN}$WALLET_BACKUP${NC} ch·ª©a th√¥ng tin quan tr·ªçng, h√£y backup!"
echo -e "  ‚Ä¢ File ${GREEN}$OFFSET_FILE${NC} l∆∞u t·∫•t c·∫£ offset ƒë√£ d√πng"
echo -e "  ‚Ä¢ Ki·ªÉm tra offset: ${CYAN}./list-offsets.sh${NC}\n"
