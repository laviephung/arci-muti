#!/bin/bash
# Script t·ª± ƒë·ªông generate docker-compose.yml cho nhi·ªÅu nodes v·ªõi prefix v√† port range t√πy ch·ªânh
# S·ª≠ d·ª•ng: ./generate-compose-multi.sh <prefix> <s·ªë_node> <port_b·∫Øt_ƒë·∫ßu>
# V√≠ d·ª•: ./generate-compose-multi.sh arx 5 8080
#        ./generate-compose-multi.sh mxc 5 9080

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# L·∫•y parameters
PREFIX=${1:-arx}
NUM_NODES=${2:-5}
START_PORT=${3:-8080}

echo -e "${BLUE}========================================${NC}"
echo -e "${GREEN}   GENERATE DOCKER-COMPOSE FILE${NC}"
echo -e "${BLUE}========================================${NC}"
echo -e "${YELLOW}Prefix: $PREFIX${NC}"
echo -e "${YELLOW}S·ªë nodes: $NUM_NODES${NC}"
echo -e "${YELLOW}Port b·∫Øt ƒë·∫ßu: $START_PORT${NC}\n"

# T·∫°o t√™n file compose v·ªõi prefix
COMPOSE_FILE="docker-compose-${PREFIX}.yml"

# Ki·ªÉm tra xem c√≥ file compose n√†o ƒëang ch·∫°y kh√¥ng
if [ -f "$COMPOSE_FILE" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  File $COMPOSE_FILE ƒë√£ t·ªìn t·∫°i!${NC}"
    read -p "B·∫°n c√≥ mu·ªën ghi ƒë√®? (y/n): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${RED}‚úó ƒê√£ h·ªßy${NC}"
        exit 1
    fi
fi

# Ki·ªÉm tra port conflict
echo -e "${BLUE}Ki·ªÉm tra port conflicts...${NC}"
for i in $(seq 1 $NUM_NODES); do
    PORT=$((START_PORT + i - 1))
    if lsof -Pi :$PORT -sTCP:LISTEN -t >/dev/null 2>&1; then
        echo -e "${RED}‚úó Port $PORT ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!${NC}"
        echo -e "${YELLOW}Vui l√≤ng ch·ªçn port b·∫Øt ƒë·∫ßu kh√°c ho·∫∑c stop service ƒëang d√πng port n√†y${NC}"
        exit 1
    fi
done
echo -e "${GREEN}‚úì T·∫•t c·∫£ ports ƒë·ªÅu available${NC}\n"

# Header
cat > $COMPOSE_FILE << 'EOF'
version: '3.8'

services:
EOF

# Generate services
for i in $(seq 1 $NUM_NODES); do
    PORT=$((START_PORT + i - 1))
    
    cat >> $COMPOSE_FILE << EOF
  ${PREFIX}-node-$i:
    image: arcium/arx-node
    container_name: ${PREFIX}-node-$i
    restart: unless-stopped
    environment:
      - NODE_IDENTITY_FILE=/usr/arx-node/node-keys/node_identity.pem
      - NODE_KEYPAIR_FILE=/usr/arx-node/node-keys/node_keypair.json
      - OPERATOR_KEYPAIR_FILE=/usr/arx-node/node-keys/operator_keypair.json
      - CALLBACK_AUTHORITY_KEYPAIR_FILE=/usr/arx-node/node-keys/callback_authority_keypair.json
      - NODE_CONFIG_PATH=/usr/arx-node/arx/node_config.toml
      - RUST_LOG=info
    volumes:
      - ./node-$i/node-config.toml:/usr/arx-node/arx/node_config.toml
      - ./node-$i/node-keypair.json:/usr/arx-node/node-keys/node_keypair.json:ro
      - ./node-$i/node-keypair.json:/usr/arx-node/node-keys/operator_keypair.json:ro
      - ./node-$i/callback-kp.json:/usr/arx-node/node-keys/callback_authority_keypair.json:ro
      - ./node-$i/identity.pem:/usr/arx-node/node-keys/node_identity.pem:ro
      - ./node-$i/logs:/usr/arx-node/logs
    ports:
      - "$PORT:8080"
    networks:
      - ${PREFIX}-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

EOF
done

# Footer
cat >> $COMPOSE_FILE << EOF
networks:
  ${PREFIX}-network:
    driver: bridge
EOF

echo -e "${GREEN}‚úì ƒê√£ t·∫°o file $COMPOSE_FILE cho $NUM_NODES nodes${NC}"
echo -e "${GREEN}‚úì Ports: $START_PORT - $((START_PORT + NUM_NODES - 1))${NC}\n"

echo -e "${YELLOW}üìã N·ªòI DUNG FILE:${NC}"
echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
cat $COMPOSE_FILE
echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}\n"

echo -e "${YELLOW}üìä PORT MAPPING:${NC}"
for i in $(seq 1 $NUM_NODES); do
    PORT=$((START_PORT + i - 1))
    echo -e "  ${GREEN}${PREFIX}-node-$i${NC} ‚Üí Port ${BLUE}$PORT${NC}"
done

echo ""
echo -e "${YELLOW}üìÇ C·∫§U TR√öC TH∆Ø M·ª§C C·∫¶N T·∫†O:${NC}"
for i in $(seq 1 $NUM_NODES); do
    echo -e "  ${PREFIX}-node-$i/"
    echo -e "    ‚îú‚îÄ‚îÄ node-config.toml"
    echo -e "    ‚îú‚îÄ‚îÄ node-keypair.json"
    echo -e "    ‚îú‚îÄ‚îÄ callback-kp.json"
    echo -e "    ‚îú‚îÄ‚îÄ identity.pem"
    echo -e "    ‚îî‚îÄ‚îÄ logs/"
done

echo ""
echo -e "${GREEN}üöÄ C√ÅCH S·ª¨ D·ª§NG:${NC}"
echo -e "  1. T·∫°o th∆∞ m·ª•c v√† file config cho t·ª´ng node:"
echo -e "     ${BLUE}mkdir -p ${PREFIX}-node-{1..$NUM_NODES}/logs${NC}"
echo -e ""
echo -e "  2. Copy file c·∫•u h√¨nh v√†o t·ª´ng th∆∞ m·ª•c"
echo -e ""
echo -e "  3. Ch·∫°y docker compose:"
echo -e "     ${BLUE}docker-compose -f $COMPOSE_FILE up -d${NC}"
echo -e ""
echo -e "  4. Ki·ªÉm tra status:"
echo -e "     ${BLUE}docker-compose -f $COMPOSE_FILE ps${NC}"
echo -e ""
echo -e "  5. Xem logs:"
echo -e "     ${BLUE}docker-compose -f $COMPOSE_FILE logs -f ${PREFIX}-node-1${NC}"
echo -e ""
echo -e "  6. Stop services:"
echo -e "     ${BLUE}docker-compose -f $COMPOSE_FILE down${NC}"

echo ""
echo -e "${YELLOW}üí° V√ç D·ª§ CH·∫†Y NHI·ªÄU BATCH:${NC}"
echo -e "  ${BLUE}./generate-compose-multi.sh arx 5 8080${NC}  # arx-node-1 ƒë·∫øn arx-node-5 (ports 8080-8084)"
echo -e "  ${BLUE}./generate-compose-multi.sh mxc 5 9080${NC}  # mxc-node-1 ƒë·∫øn mxc-node-5 (ports 9080-9084)"
echo -e "  ${BLUE}./generate-compose-multi.sh sol 3 10080${NC} # sol-node-1 ƒë·∫øn sol-node-3 (ports 10080-10082)"

echo ""
